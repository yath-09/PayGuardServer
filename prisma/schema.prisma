// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  userName        String
  phoneNumber     String   @unique
  pin             String
  isPhoneVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  refreshToken    String?
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")
  panNumber       String?        @unique
  bankAccounts    BankAccount[]
  walletLimit     Int  @default(10000)
}

model BankAccount {
  id             Int      @id @default(autoincrement())
  accountNumber  String   @unique
  ifscCode       String
  bankName       String  
  upiId          String   @unique
  mpin           String   // 6-digit secure MPIN
  isDefault      Boolean  @default(false)
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  bankId         Int
  bank           Bank     @relation(fields: [bankId], references: [id])
  bankTransferLimit Int  @default(25000)
}

model Bank {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  accounts BankAccount[]
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model p2pTransfer {
  id         Int          @id @default(autoincrement())
  amount     Int
  status    OnRampStatus  @default(Processing)
  token     String       @unique
  timestamp  DateTime
  fromUserId Int
  fromUser   User         @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])//imp step
  toUserId   Int
  toUser     User         @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
  paymentMode String? 
  receiverMode String?
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
